import os

configfile: '../config/config.yaml'


def make_davinci_source_file_name():
    year, energy, direction, strippingNumber = config["davinci"]["source"]["year"], config["davinci"]["source"]["energy"], config["davinci"]["source"]["direction"], config["davinci"]["source"]["strippingNumber"]
    
    relative_path =  f"../../sources/SOURCE_LHCb_{year}_Beam{energy}GeV_VeloClosed_Mag{direction}_RealData_Reco14_Stripping{strippingNumber}_EW_DST.py"

    return os.path.abspath(os.path.join(os.getcwd(), relative_path))

def make_davinci_output_file_name():
    year, direction = config["davinci"]["source"]["year"], config["davinci"]["source"]["direction"]

    relative_path = f"../../data/{year}{direction}.root"

    return os.path.abspath(os.path.join(os.getcwd(), relative_path))


davinci_input_file_name = make_davinci_source_file_name()
davinci_output_file_name = make_davinci_output_file_name()

def make_root_processing_output_file_name(append):
    year, direction = config["davinci"]["source"]["year"], config["davinci"]["source"]["direction"]
    relative_path = f"intermediate-data/after-cut/{year}{direction}{append}.root"

    return os.path.abspath(os.path.join(os.getcwd(), relative_path))

cutflow_output_file_name = make_root_processing_output_file_name('Cut')
processing_root_output_file_name = make_root_processing_output_file_name('FinalProcessing')

def make_histogram_output_file_name(histogramLabel):
    relative_path = f"intermediate-data/histograms/{histogramLabel}.root"

    return os.path.abspath(os.path.join(os.getcwd(), relative_path))

def make_histogram_chart_output_file_name(histogramLabel):
    relative_path = f"../results/{histogramLabel}.png"

    return os.path.abspath(os.path.join(os.getcwd(), relative_path))

def make_histogram_config_file_name(histogramLabel):
    relative_path = f"../config/{histogramLabel}.yaml"

    return os.path.abspath(os.path.join(os.getcwd(), relative_path))


# ===================================================
# RULES
# ---------------------------------------------------
# TODO: fix and test this rule in environment with cvfs
rule run_davinci:
    input: davinci_input_file_name
    output: davinci_output_file_name
    run:
        if config["davinci"]["is_enabled"]:
            shell("lb-run Davinci/v45r8 gaudirun.py ../../Z_data_to_root.py {input}")
        else:
            shell("echo 'Skipping DaVinci Rule...'")

            
# Rule for applying cutflow
rule apply_cutflow:
    input: davinci_output_file_name
    params: config['cutflow']['muon_PT']
    output: cutflow_output_file_name
    shell: "cd scripts && root -q 'applycutflow.C(\"{input}\", {params}, \"{output}\")'"

rule append_tlorenz_vector:
    input: cutflow_output_file_name
    output: processing_root_output_file_name
    shell: "cd scripts && root -q 'appendTLorentz.C(\"{input}\", \"{output}\")'"

# Rules for histograms
histogram_configs_tags = ['Z_MM', 'muon_PT', 'muon_ProbNNmu', 'muon_Rapidity', 'muon_Rapidity_sum', 'muon_PT_sum']

wildcard_constraints:
    config_histogram = "|".join(histogram_configs_tags)

rule generate_histogram:
    input: 
        config_chart = make_histogram_config_file_name("{config_histogram}"),
        root_file_name = processing_root_output_file_name
    output:
        rootFile = make_histogram_output_file_name("{config_histogram}")
    shell: "cd scripts && root -q 'generateHistogram.C(\"{input.root_file_name}\", \"{input.config_chart}\")'"


rule draw_chart:
    input: 
        config_chart = make_histogram_config_file_name("{config_histogram}"),
        root_file_name = make_histogram_output_file_name("{config_histogram}")
    output:
        chart = make_histogram_chart_output_file_name("{config_histogram}")
    shell: "cd scripts && root -q 'draw.C(\"{input.root_file_name}\", \"{input.config_chart}\")'"

rule run_all:
    input: expand(make_histogram_chart_output_file_name("{config}"), config=histogram_configs_tags)